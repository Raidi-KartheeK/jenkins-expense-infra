pipeline {
    agent { label "Agent-1" }
    options {
        timeout(time: 20, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    parameters {
        choice(name: 'Action', choices: ['apply', 'destroy'], description: 'Select the action ')
    }
    environment {
        AWS_REGION = 'us-east-1'
        AWS_CREDENTIALS = 'aws-credentials'
        EXPENSE_DIR = '20-sg'
    }
    stages {
        stage('Init and Plan') {
            steps {
                script {
                    withAWS(region: AWS_REGION, credentials: AWS_CREDENTIALS) {
                        sh """
                            cd ${EXPENSE_DIR}
                            terraform init -reconfigure
                            terraform plan -out=tfplan
                        """
                    }
                }
            }
        }
        stage('Apply/Destroy') {
            steps {
                script {
                    withAWS(region: AWS_REGION, credentials: AWS_CREDENTIALS) {
                        def action = params.Action == 'apply' ? "apply" : "destroy -auto-approve"
                        sh "cd ${EXPENSE_DIR} && terraform ${action} ${action == 'apply' ? 'tfplan' : ''}"
                    }
                }
            }
        }
        stage('Parallel -1') {
            when { expression { params.Action == 'apply' } }
            steps {
                script {
                    def directories = ['20-bastion', '30-rds', '40-eks', '50-acm', '60-alb', '70-ecr', '80-cdn']
                    directories.each { directory ->
                        build job: "${directory}/Jenkinsfile", parameters: [choice(name: 'Action', value: params.Action)]
                    }
                }
            }
        }
    }
    post {
        always {
            echo "Cleaning up the workspace"
            deleteDir()
        }
        success {
            echo "Pipeline completed successfully"
        }
        failure {
            echo "Run when pipeline failure"
        }
    }
}